#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="restic"

#cat <<EOF
#
#*****************************************************************************************
#*                                                                                       *
#*                    END OF LIFE NOTICE AUGUST 18, 2025                                 *
#*                               tiredofit/restic                                        *
#*                                                                                       *
#* This image is no longer maintained as of and will not receive updates.                *
#*                                                                                       *
#* A successor image is available at:                                                    *
#*                                                                                       *
#* Repository | Documentation:                                                           *
#*   - https://github.com/nfrastack/container-restic                                     *
#*                                                                                       *
#* Image Registries:                                                                     *
#*   - https://hub.docker.com/r/nfrastack/restic                                         *
#*   - https://github.com/nfrastack/container-restic/pkgs/container/container-restic     *
#*                                                                                       *
#* Please visit https://nfrastack.com for more information.                              *
#*                                                                                       *
#*****************************************************************************************
#
#EOF
#
#sleep 15

setup_container_mode
bootstrap_filesystem

    if var_true "${ENABLE_BACKUP}" ; then
        print_debug "Configuring Backup"
        create_schedulers backup
        if var_true "${BACKUP_ON_STARTUP}" ; then
            print_notice "Backing up on Startup"
            backup-now manual
        fi
    fi

    if var_true "${ENABLE_CHECK}" ; then
        print_debug "Configuring Check"
        create_schedulers check
        if var_true "${CHECK_ON_STARTUP}" ; then
            print_notice "Checking on Startup"
            check-now manual
        fi
    fi

    if var_true "${ENABLE_CLEANUP}" ; then
        print_debug "Configuring Cleanup"
        create_schedulers cleanup
        if var_true "${CLEANUP_ON_STARTUP}" ; then
            print_notice "Checking on Startup"
            cleanup-now manual
        fi
    fi

    if var_true "${ENABLE_INVENTORY}" ; then
        print_debug "Configuring Inventory"
        create_schedulers inventory
    fi

    if var_true "${ENABLE_PRUNE}" ; then
        print_debug "Configuring Prune"
        create_schedulers prune
        if var_true "${PRUNE_ON_STARTUP}" ; then
            print_notice "Pruning on Startup"
            prune-now manual
        fi
    fi

    if var_true "${ENABLE_SERVER}" ; then
        print_debug "Configuring Repository Server"
        repository server
        if var_false "${ENABLE_NGINX}" ; then
            service_stop 10-nginx
            service_stop 11-nginx-config-reload
            rm -rf /etc/zabbix/zabbix_agentd.conf.d/nginx.conf
        fi
    else
        service_stop restic-rest-server
        service_stop 10-nginx
        service_stop 11-nginx-config-reload
        rm -rf /etc/zabbix/zabbix_agentd.conf.d/nginx.conf
    fi

    if var_true "${ENABLE_RCLONE}" ; then
        print_debug "Configuring RClone"
    else
        service_stop rclone
    fi

    if var_true "${ENABLE_STANDALONE}" ; then
        print_debug "Configuring Standlone"
        liftoff
        exit 0
    fi

    create_schedulers init


liftoff
